<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.tsdes</groupId>
    <artifactId>myCode</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>cards-dto</module>
        <module>user-collections</module>
        <module>rest-dto</module>
        <module>rest-exception</module>
        <module>scores</module>
        <module>cards</module>
        <module>api-gateway</module>
        <module>e2e-tests</module>
        <module>auth</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <fs>${file.separator}</fs>
        <version.java>11</version.java>
        <!-- FIXME: 2.3.6 breaks... but anyway jump directly to 2.4.x once Spring Cloud supports it-->
        <version.springboot>2.5.10</version.springboot>
        <version.junit>5.7.0</version.junit>
        <version.junit.platform>1.5.2</version.junit.platform>
        <version.jacoco>0.8.5</version.jacoco>
        <version.h2>2.2.220</version.h2>
        <version.postgres>42.4.3</version.postgres>
        <version.flyway>8.4.4</version.flyway>
        <version.testcontainers>1.15.1</version.testcontainers>
        <version.selenium>3.141.59</version.selenium>
        <version.restassured>4.2.0</version.restassured>
        <version.surefire-failsafe>3.0.0-M4</version.surefire-failsafe>
        <version.kotlin>1.6.10</version.kotlin>
        <version.springcloud>2020.0.5</version.springcloud>
        <version.springfox>3.0.0</version.springfox>
        <version.graphql-spring>5.0.2</version.graphql-spring>
        <version.graphql-java-tools>5.2.4</version.graphql-java-tools>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
    </properties>

    <dependencies>
        <!--
               The Java API comes with the JDK itself.
               On the other hand, the Kotlin API is treated like any other
               third-party library, and we need to include it here as a dependency.

               Unfortunately, the name of the supported JDK is in the id of
               the artifact itself.
               Why a problem? The day a new JDK version is used, would need to update
               every single module :(
               So, we add it by default to all submodules.
          -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib-jdk8</artifactId>
        </dependency>

        <!--
            Looks like kotlin-reflect is now a requirement in Spring Boot 2.
            So, as we use Kotlin in all modules, we add it here by default.
        -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-reflect</artifactId>
        </dependency>


    </dependencies>
    <dependencyManagement>
        <dependencies>
            <!-- Kotlin dependencies -->
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib</artifactId>
                <version>${version.kotlin}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib-jdk8</artifactId>
                <version>${version.kotlin}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-reflect</artifactId>
                <version>${version.kotlin}</version>
            </dependency>

            <!-- SpringBoot BOM -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${version.springboot}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${version.springboot}</version>
                <scope>test</scope>
                <!-- Exclude JUnit 4, which is added by default-->
                <exclusions>
                    <exclusion>
                        <groupId>junit</groupId>
                        <artifactId>junit</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.junit.vintage</groupId>
                        <artifactId>junit-vintage-engine</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>32.0.0-jre</version>
            </dependency>
            <!-- Database -->
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${version.h2}</version>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${version.postgres}</version>
            </dependency>
            <dependency>
                <groupId>org.jooq</groupId>
                <artifactId>jooq</artifactId>
                <version>3.12.3</version>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${version.flyway}</version>
            </dependency>


            <!-- test -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${version.junit}</version>
                <scope>test</scope>
            </dependency>
            <!--
                This is needed for some libraries that do not support
                JUnit 5 yet, like Arquillian:
                https://github.com/arquillian/arquillian-core/issues/137

                TODO: remove once Arquillian is supported
              -->
            <dependency>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
                <version>${version.junit}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- to test REST APIs -->
                <groupId>io.rest-assured</groupId>
                <artifactId>rest-assured</artifactId>
                <version>${version.restassured}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>json-path</artifactId>
                <version>${version.restassured}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>xml-path</artifactId>
                <version>${version.restassured}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- to mock web services -->
                <groupId>com.github.tomakehurst</groupId>
                <artifactId>wiremock-standalone</artifactId>
                <version>2.27.2</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- used to control a browser for system testing -->
                <groupId>org.seleniumhq.selenium</groupId>
                <artifactId>selenium-java</artifactId>
                <version>${version.selenium}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- used to control a browser for system testing -->
                <groupId>org.seleniumhq.selenium</groupId>
                <artifactId>selenium-api</artifactId>
                <version>${version.selenium}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- used to control a browser for system testing -->
                <groupId>org.seleniumhq.selenium</groupId>
                <artifactId>selenium-chrome-driver</artifactId>
                <version>${version.selenium}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- used to control a browser for system testing -->
                <groupId>org.seleniumhq.selenium</groupId>
                <artifactId>selenium-remote-driver</artifactId>
                <version>${version.selenium}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- used to control a browser for system testing -->
                <groupId>org.seleniumhq.selenium</groupId>
                <artifactId>selenium-support</artifactId>
                <version>${version.selenium}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- for code coverage -->
                <groupId>org.jacoco</groupId>
                <artifactId>org.jacoco.core</artifactId>
                <version>${version.jacoco}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- To use Docker from tests -->
                <groupId>org.testcontainers</groupId>
                <artifactId>testcontainers</artifactId>
                <version>${version.testcontainers}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- To support JUnit 5  -->
                <groupId>org.testcontainers</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${version.testcontainers}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>selenium</artifactId>
                <version>${version.testcontainers}</version>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.seleniumhq.selenium</groupId>
                        <artifactId>selenium-remote-driver</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <!-- For handling waiting of asynchronous events -->
                <groupId>org.awaitility</groupId>
                <artifactId>awaitility</artifactId>
                <version>4.0.3</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- To mock/stub objects -->
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>3.2.0</version>
                <scope>test</scope>
            </dependency>


            <!-- Misc -->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>1.7.25</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>2.11.1</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-xml</artifactId>
                <version>2.8.9</version>
            </dependency>
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>2.8.9</version>
            </dependency>
            <dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
                <version>2.3.1</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-runtime</artifactId>
                <version>2.3.1</version>
            </dependency>
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>1.13</version>
            </dependency>
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>1.2</version>
            </dependency>
            <dependency>
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm</artifactId>
                <version>7.2</version>
            </dependency>


            <!-- for caching -->
            <dependency>
                <groupId>net.sf.ehcache</groupId>
                <artifactId>ehcache</artifactId>
                <version>2.10.6</version>
            </dependency>
            <!-- Looks like we cannot use new version, as HttpClient still rely on 2.x-->
            <!--<dependency>-->
            <!--<groupId>org.ehcache</groupId>-->
            <!--<artifactId>ehcache</artifactId>-->
            <!--<version>3.5.2</version>-->
            <!--</dependency>-->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient-cache</artifactId>
                <version>4.5.12</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${version.springcloud}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <!-- SpringFox for Swagger/OpenAPI -->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-boot-starter</artifactId>
                <version>${version.springfox}</version>
            </dependency>


            <!--  GraphQL -->
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphql-spring-boot-starter</artifactId>
                <version>${version.graphql-spring}</version>
            </dependency>
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphiql-spring-boot-starter</artifactId>
                <version>${version.graphql-spring}</version>
            </dependency>
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>voyager-spring-boot-starter</artifactId>
                <version>${version.graphql-spring}</version>
            </dependency>
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphql-java-tools</artifactId>
                <version>${version.graphql-java-tools}</version>
            </dependency>


            <!-- Misc -->
            <dependency>
                <groupId>com.netflix.hystrix</groupId>
                <artifactId>hystrix-core</artifactId>
                <version>1.5.12</version>
            </dependency>
            <dependency>
                <groupId>io.reactivex</groupId>
                <artifactId>rxjava</artifactId>
                <version>1.2.2</version>
            </dependency>
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-client-java-controller</artifactId>
                <version>1.0.1</version>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>javax.validation</groupId>
                        <artifactId>validation-api</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>


        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <artifactId>kotlin-maven-plugin</artifactId>
                <groupId>org.jetbrains.kotlin</groupId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>

                <plugin>
                    <artifactId>kotlin-maven-plugin</artifactId>
                    <groupId>org.jetbrains.kotlin</groupId>
                    <version>${version.kotlin}</version>

                    <configuration>
                        <jvmTarget>${version.java}</jvmTarget>
                        <compilerPlugins>
                            <plugin>spring</plugin>
                            <plugin>jpa</plugin>
                        </compilerPlugins>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.jetbrains.kotlin</groupId>
                            <artifactId>kotlin-maven-allopen</artifactId>
                            <version>${version.kotlin}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.jetbrains.kotlin</groupId>
                            <artifactId>kotlin-maven-noarg</artifactId>
                            <version>${version.kotlin}</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <id>compile</id>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                            <configuration>
                                <sourceDirs>
                                    <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                                    <sourceDir>${project.basedir}/src/main/java</sourceDir>
                                </sourceDirs>
                            </configuration>
                        </execution>
                        <execution>
                            <id>test-compile</id>
                            <goals>
                                <goal>test-compile</goal>
                            </goals>
                            <configuration>
                                <sourceDirs>
                                    <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
                                    <sourceDir>${project.basedir}/src/test/java</sourceDir>
                                </sourceDirs>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <executions>
                        <!-- Replacing default-compile as it is treated specially by maven -->
                        <execution>
                            <id>default-compile</id>
                            <phase>none</phase>
                        </execution>
                        <!-- Replacing default-testCompile as it is treated specially by maven -->
                        <execution>
                            <id>default-testCompile</id>
                            <phase>none</phase>
                        </execution>
                        <execution>
                            <id>java-compile</id>
                            <phase>compile</phase>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>java-test-compile</id>
                            <phase>test-compile</phase>
                            <goals>
                                <goal>testCompile</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <!-- Need to create self-executable uber/fat jars -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${version.springboot}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <!-- For manual handling of generated resources -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <!-- Built-in plugin used to execute unit tests -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${version.surefire-failsafe}</version>
                    <configuration>
                        <forkCount>1</forkCount>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <rerunFailingTestsCount>3</rerunFailingTestsCount>
                        <argLine>-Xms512m -Xmx2048m</argLine>
                    </configuration>
                </plugin>

                <!-- this is needed to run integration tests -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${version.surefire-failsafe}</version>
                    <configuration>
                        <forkCount>1</forkCount>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <rerunFailingTestsCount>3</rerunFailingTestsCount>
                        <argLine>-Xms512m -Xmx4096m</argLine>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                    Avoid failing War generation if web.xml is missing, as we ll not
                    use it in some example modules
                -->
                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.0.0</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>

                <!-- For running ANT tasks, like renaming files/folders -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                </plugin>

                <!--
                    Used to calculate code-coverage of the tests
                -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${version.jacoco}</version>
                    <executions>
                        <execution>
                            <id>default-prepare-agent</id>
                            <phase>initialize</phase>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>default-report</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>default-prepare-agent-integration</id>
                            <phase>package</phase>
                            <goals>
                                <goal>prepare-agent-integration</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>default-report-integration</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>report-integration</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- For cloud deployment on Heroku -->
                <plugin>
                    <groupId>com.heroku.sdk</groupId>
                    <artifactId>heroku-maven-plugin</artifactId>
                    <version>2.0.2</version>
                </plugin>
                <!-- For scanning dependencies for known security issues -->
                <plugin>
                    <groupId>org.owasp</groupId>
                    <artifactId>dependency-check-maven</artifactId>
                    <version>5.3.1</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <!--  To execute external commands, like YARN -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.6.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>